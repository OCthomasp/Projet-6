const fs = require("fs"); // File System
const Sauce = require('../models/sauce');

/** 
* Get all existing sauces from the api
* @param {object} req - request
* @param {object} res - response
* @param {function} next - method next : continue execution in the next middleware
*/
exports.getAllSauces = (req, res, next) => {
    Sauce.find()
        // 200 : successful request (OK)
        .then(sauces => res.status(200).json(sauces))
        // 400 : bad request
        .catch(error => res.status(400).json({error}));
};

/** 
* Get a sauce in particular from the api
* @param {object} req - request
* @param {object} res - response
* @param {function} next - method next : continue execution in the next middleware
*/
exports.getOneSauce = (req, res, next) => {
    // get sauce with matching id
    Sauce.findOne({_id: req.params.id})
        // 200 : successful request (OK)
        .then((sauce) => res.status(200).json(sauce))
        // 404 : page not found
        .catch((error) => res.status(404).json({ error }));
};

/** 
* Add a new sauce
* @param {object} req - request
* @param {object} res - response
* @param {function} next - method next : continue execution in the next middleware
*/
exports.createSauce = (req, res, next) => {
    // Create a new sauceObject with the parameters passed in the request
    const sauceObject = JSON.parse(req.body.sauce);
    // Remove the _id field automatically generated by the database
    delete sauceObject._id;
    // Add the image path to the new sauce
    const sauce = new Sauce({...sauceObject, 
        imageUrl: `${req.protocol}://${req.get("host")}/images/${req.file.filename}`});
    sauce.save()
        // 201 : successfully created a sauce (Created)
        .then(() => res.status(201).json({message: "Sauce ajoutée !"}))
        // 400 : bad request
        .catch((error) => res.status(400).json({ error : error }));
};

/** 
* Modify an existing sauce
* @param {object} req - request
* @param {object} res - response
* @param {function} next - method next : continue execution in the next middleware
*/
exports.modifySauce = (req, res, next) => {
    const filter = { _id: req.params.id };

    // ? : ternary operator : Condition ? True : False
    // If the image is modified, add its url to the new sauce object we create
    const sauceObject = req.file ? {
        ...JSON.parse(req.body.sauce),
        imageUrl: `${req.protocol}://${req.get('host')}/images/${req.file.filename}`} : { ...req.body };
    
    // Remove the _userId field automatically generated by the database
    delete sauceObject._userId;

    Sauce.findOne(filter)
    .then(sauce => {
        // Check if the user is the one who created the sauce
        if(sauce.userId === req.auth.userId){
            // Update the sauce with the new one we created
            Sauce.updateOne(filter,{ 
                ...sauceObject,
                _id: req.params.id 
            })
                // 200 : successful request (OK)
                .then(() => res.status(200).json({ message: 'Sauce modifiée !' }))
                // 400 : bad request
                .catch((error) => res.status(400).json({ error : error }));
        }
        else{
            // 403 : Forbidden
            res.status(403).json({error : 'acces refusé'});
        }
    });
};

/** 
* Delete an existing sauce
* @param {object} req - request
* @param {object} res - response
* @param {function} next - method next : continue execution in the next middleware
*/
exports.deleteSauce = (req, res, next) => {
    const filter = { _id: req.params.id };
    
    Sauce.findOne(filter)
        .then(sauce => {
            // Check if the user is the one who created the sauce
            if(sauce.userId === req.auth.userId){
                // get the text after /images/ : filename
                const filename = sauce.imageUrl.split('/images/')[1];
                // delete the file (unlink)
                fs.unlink(`images/${filename}`, () => {
                    // Delete the sauce.
                    Sauce.deleteOne(filter)
                        // 200 : successful request (OK)
                        .then(() => res.status(200).json({message: 'Sauce supprimée !'}))
                        // 400 : bad request
                        .catch((error) => res.status(400).json({ error }));
                });
            }
            else{
                // 403 : Forbidden
                res.status(403).json({error : 'acces refusé'});
            }
        })
        // 500 : internal Server Error
        .catch((error) => res.status(500).json({ error }));
};

/** 
* Brief description of the function here.
* @summary If the description is long, write your summary here. Otherwise, feel free to remove this.
* @param {ParamDataTypeHere} parameterNameHere - Brief description of the parameter here. Note: For other notations of data types, please refer to JSDocs: DataTypes command.
* @return {ReturnValueDataTypeHere} Brief description of the returning value here.
*/
exports.likeDislikeSauce = (req, res, next) => {
    const filter = { _id: req.params.id };
    
    // Check value of like to know what the user did
    if(req.body.like == 1){
        // use the $inc and $push operators provided by Mongo DB to update the sauce
        Sauce.updateOne(filter,{
            $inc: { likes: 1 },
            $push: { usersLiked: req.body.userId } 
        })
            // 200 : successful request (OK)
            .then(() => res.status(200).json({ message: 'Avis positif' }))
            // 400 : bad request
            .catch(error => res.status(400).json({ error }));
    } 
    else if(req.body.like == -1){
        // use the $inc and $push operators provided by Mongo DB to update the sauce
        Sauce.updateOne(filter, {
            $inc: { dislikes: 1 }, 
            $push: { usersDisliked: req.body.userId } 
        })
            // 200 : successful request (OK)
            .then(() => res.status(200).json({ message: 'Avis negatif' }))
            // 400 : bad request
            .catch(error => res.status(400).json({ error }));
    }
    else if(req.body.like == 0){
        Sauce.findOne(filter)
            .then(sauce => {
                // Check if the user has liked the sauce
                if(sauce.usersLiked.includes(req.body.userId)){
                    // use the $inc and $pull operators provided by Mongo DB to update the sauce
                    Sauce.updateOne(filter, { 
                        $inc: { likes: -1 }, 
                        $pull: { usersLiked: req.body.userId }
                    })
                        // 200 : successful request (OK)
                        .then((sauce) => { res.status(200).json({ message: 'Like retiré' }) })
                        // 400 : bad request
                        .catch(error => res.status(400).json({ error }));
                } 
                // Check if the user has disliked the sauce
                else if (sauce.usersDisliked.includes(req.body.userId)){
                    // use the $inc and $pull operators provided by Mongo DB to update the sauce
                    Sauce.updateOne(filter, {
                        $inc: { dislikes: -1 },
                        $pull: { usersDisliked: req.body.userId }
                    })
                        // 200 : successful request (OK)
                        .then((sauce) => { res.status(200).json({ message: 'Dislike retiré' }) })
                        // 400 : bad request
                        .catch(error => res.status(400).json({ error }));
                }
            })
            // 400 : bad request
            .catch(error => res.status(400).json({ error }));
    }
}